from django.core.management.base import BaseCommand
from articles.models import Tag

TAG_LIST = [
    "AI",
    "Artificial Intelligence",
    "Machine Learning",
    "AI Agents",
    "Multimodal AI",
    "Generative AI",
    "Automation",
    "Robotics",
    "Climate Change",
    "Sustainability",
    "Clean Energy",
    "Green Tech",
    "Electric Vehicles",
    "Climate Policy",
    "Biodiversity",
    "Environmental Justice",
    "Health Tech",
    "Bioinformatics",
    "Telemedicine",
    "Mental Health",
    "Genomics",
    "Pandemics",
    "Public Health",
    "Global Economy",
    "Inflation",
    "Recession",
    "Trade Policy",
    "Supply Chain",
    "Cryptocurrency",
    "Blockchain",
    "Digital Currency",
    "Central Bank Digital Currency",
    "FinTech",
    "Cybersecurity",
    "Data Privacy",
    "Surveillance",
    "Quantum Computing",
    "5G / 6G",
    "Internet of Things",
    "Smart Cities",
    "Space Exploration",
    "Astrophysics",
    "Lunar Missions",
    "Mars Missions",
    "Education Tech",
    "EdTech",
    "Remote Learning",
    "Skill Training",
    "Future of Work",
    "Gig Economy",
    "Labor Automation",
    "Social Justice",
    "Equity & Inclusion",
    "Human Rights",
    "Migration",
    "Refugees",
    "Geopolitics",
    "International Relations",
    "Defense / Security",
    "Conflict Zones",
    "Arms Control",
    "Diplomacy",
    "Elections / Democracy",
    "Voting Rights",
    "Regulation / Policy",
    "Tech Regulation",
    "AI Ethics",
    "Ethics in Tech",
    "Digital Rights",
    "Media & Journalism",
    "News Trends",
    "Fact Checking",
    "Misinformation",
    "Social Media Trends",
    "Influencer Culture",
    "Short-form Video",
    "Content Creation",
    "User Generated Content",
    "Pop Culture",
    "Entertainment",
    "Film & TV",
    "Gaming",
    "Music",
    "Fashion & Style",
    "Sports",
    "Esports",
    "Travel & Tourism",
    "Urbanism",
    "Architecture & Design",
    "Food & Nutrition",
    "Agriculture & Food Tech",
    "Mental Wellness",
    "Lifestyle Trends",
    "Wellness Tech",
    "Startup / Innovation",
    "Venture Capital",
    "Funding / Investment",
    "Corporate Sustainability",
    "ESG (Environmental, Social, Governance)",
    "Consumer Behavior",
    "Digital Marketing",
    "E-commerce",
    "Retail Tech",
    "Localization",
    "Localization / Globalization",
    "Language Tech",
    "Translation / NLP",
    "Quantum Tech",
    "Next-gen Hardware",
    "Edge Computing",
    "Cloud & Serverless",
    "Augmented Reality / Virtual Reality",
    "Metaverse",
    "Digital Art / NFTs",
    "Cultural Trends",
    "Demographics",
    "Aging Population",
    "Youth Culture",
    "Migration & Urbanization",
    "Disaster / Crisis",
    "Extreme Weather",
    "Natural Disasters",
    "Epidemics",
    "Wildfires",
    "Flooding",
    "Resilience & Adaptation",
    "Transportation / Mobility",
    "Autonomous Vehicles",
    "Mobility as a Service",
    "Public Transit Innovation",
    "Energy Storage",
    "Batteries",
    "Hydrogen Tech",
    "Decay / Recycling",
    "Circular Economy",
    "Waste Management",
    "Water Tech / Desalination",
    "Health Policy",
    "Drug Development",
    "Biotech",
    "Agriculture Policy",
    "Food Security",
    "Ocean / Marine Tech",
    "Climate Migration",
    "Urban Resilience",
    "Smart Grid",
    "Quantum Internet",
    "Space Policy",
    "Deep Tech",
    "Frontier Tech",
    "Science & Research",
    "Academic Innovation",
    "Lab Discoveries",
    "Philanthropy",
    "Social Innovation",
    "Nonprofit Tech",
    "Behavioral Science",
    "Neuroscience",
    "AI Governance",
    "AI Safety",
    "Future Forecasting",
    "Tech Foresight",
]

class Command(BaseCommand):
    help = 'Bulk add tags to the Tag model.'

    def handle(self, *args, **options):
        created = 0
        for tag_name in TAG_LIST:
            tag, was_created = Tag.objects.get_or_create(name=tag_name)
            if was_created:
                created += 1
        self.stdout.write(self.style.SUCCESS(f"Added {created} new tags."))
